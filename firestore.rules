rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for authentication
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users collection - users can only access their own document
    match /users/{userId} {
      allow read, write, delete: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }

    // Customers collection
    match /customers/{customerId} {
      // For reads and writes, check if user owns the document
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
      // For creates, check if user is setting themselves as owner
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      // For deletes, check if user owns the document (resource exists during delete)
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Measurements collection
    match /measurements/{measurementId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Orders collection
    match /orders/{orderId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Payments collection
    match /payments/{paymentId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
  }
} 